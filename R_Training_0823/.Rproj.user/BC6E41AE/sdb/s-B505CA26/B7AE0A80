{
    "collab_server" : "",
    "contents" : "\n\n#___________________________________________________________________________\n#\n#         ___  2\n#         |__) \n#         |  \\    R Training Session II   \n#\n#___________________________________________________________________________\n\n\n\n# R Studio Projects -------------------------------------------------------\n# R Studio projects are a great feature which allow you to have one dedicated session for each project you are working on\n# One of the great features is that it sets the working directory to the project folder automatically so others can easily\n# work off the same file without having to adjust their file paths (and everything is step up the exact same).\n# To start an R Project that already exists, double click on the .Rproj file in the folder.\n# If you have not opened this session via the .Rproj file, you will need to so that all the file paths work the same on your machine\n\n\n\n# Every time you open R, you will need to \"open\" or load your packages, using library()\nlibrary(tidyverse)\n\n\n#--------------------------------------------------------------\n# ---- (0) Importing the dataset ----- \n#--------------------------------------------------------------\n# Pulling in the dataset for next steps\ndf <- read_tsv(\"RawData/ex2_data.txt\",\n                      col_types = cols(MechanismID      = \"c\",\n                                     AgeAsEntered       = \"c\",            \n                                     AgeFine            = \"c\",     \n                                     AgeSemiFine        = \"c\",    \n                                     AgeCoarse          = \"c\",      \n                                     Sex                = \"c\",     \n                                     resultStatus       = \"c\",     \n                                     otherDisaggregate  = \"c\",     \n                                     coarseDisaggregate = \"c\",     \n                                     FY2017_TARGETS     = \"d\",\n                                     FY2017Q1           = \"d\",      \n                                     FY2017Q2           = \"d\",      \n                                     FY2017Q3           = \"d\",      \n                                     FY2017Q4           = \"d\",      \n                                     FY2017APR          = \"d\",\n                                     FY2018Q1           = \"d\",\n                                     FY2018Q2           = \"d\",\n                                     FY2018_TARGETS     = \"d\"))\nspec(df)\nView(slice (df, 1:20))\n\n\n\n\n\n#--------------------------------------------------------------\n# ---- (1) Creating New Variables (Mutate) ----- \n#--------------------------------------------------------------\n\n\n# Dividing FY2017APR values by 10\ndf2 <- mutate(df, FY2017APR_true = FY2017APR/10)\nView (select(df2, FY2017APR, FY2017APR_true))\n\n# Above step AND doubling the FY18 Q2 values\ndf2 <- mutate(df, FY2017APR_true = FY2017APR/10, FY2018Q2_true = FY2018Q2 *2) \nView (select(df2, FY2017APR, FY2017APR_true, FY2018Q2, FY2018Q2_true))\n\n\n# New Partner Names, one change\n# mutate() and if_else() make for a powerful combination in tandem.\n# if_else function is comprable to IF function in excel \n\nView(count(df, PrimePartner)) # view this variable\ndf3 <- mutate(df, newpartnername = \n                if_else(PrimePartner == \"Stark\", \"OnlySansaStark\", PrimePartner))\nView(count(df3, PrimePartner, newpartnername))\n\n\n# New Partner Names, multiple changes. \ndf4 <- mutate(df, newpartnername = \n                if_else(PrimePartner == \"Stark\", \"Ned's Family\", \n                        if_else(PrimePartner == \"First Men\", \"First Men & Women\", \n                                if_else(PrimePartner == \"Ice\" , \"Ice & Fire\", PrimePartner))))\nView(count(df4, PrimePartner, newpartnername))\n\n\n# ------- Exercise Question(s) -------------\n# Please write and execute your code under the question:\n\n# 1. Create a new dataset called test1 from \"df\" and\n# create a new variable called \"newvar\", which will change the PSNU value \"The Iron Islands\" to \"Charmin Islands\"\n# 1a. Using count, view the PSNU column in dataset test1 \n\n\n\n\n\n#----------------------------------------------------------------------\n# ---- (2) Piping %>%  - Bringing It All Together ----- \n#----------------------------------------------------------------------\n\n\n# Pipes let you take the output of one function and send it directly to the next, \n# which is useful when you need to do many things to the same dataset\n\n# %>% returns an object, you can actually allow the calls to be \n# chained together in a single statement, without needing variables \n# to store the intermediate results.\n\n\n\n# Examples:\n# Positives found by Total Numerator:\nhts1 <- df %>%   # this is the pipe! goes at end of every function statement \n  filter(indicator == \"HTS_TST_POS\" & standardizedDisaggregate == \"Total Numerator\") %>%\n  select (OperatingUnit, indicator, PSNU, PrimePartner, FundingAgency, FY2018Q1, FY2017APR)\n\nView(slice(hts1, 1:20))\n\n\n# Same example Without Piping:\n# you have to create several intermediate datasets, which is inefficient \nhts_nopipe <- filter (df, indicator == \"HTS_TST_POS\" & standardizedDisaggregate == \"Total Numerator\")\nhts_nopipe2 <- select(hts_nopipe, OperatingUnit, indicator, PSNU, PrimePartner, FundingAgency, FY2018Q1, FY2017APR)\n\nView(slice(hts_nopipe2, 1:20))\n\n\n\n# New on treatment by OU and disagg type\ntx2 <- df %>%\n  filter(indicator == \"TX_NEW\" & FY2017APR >0 ) %>%\n  rename (disagg_type = standardizedDisaggregate ) %>% \n  select (OperatingUnit, indicator, PSNU, disagg_type, FY2017APR)\n\nView(count(tx2, disagg_type, FY2017APR))\n\n\n\ntx3 <- df %>% \n  filter((indicator == \"TX_CURR\" | indicator == \"TX_NEW\" | indicator == \"HTS_TST\") & standardizedDisaggregate == \"Total Numerator\") %>%\n  mutate (newpartnername = if_else(PrimePartner == \"Great Houses\", \"Castles and Mansions\", PrimePartner)) %>% \n  select (OperatingUnit, SNU1, SNUPrioritization, PSNU, newpartnername, indicator, standardizedDisaggregate, FY2017APR) %>%\n  arrange (newpartnername) %>%\n  rename (disagg_type = standardizedDisaggregate) \n\nView(tx3)\nView(count(tx3, newpartnername, indicator, disagg_type))\n\n\n# ------- Exercise Question(s) -------------\n# Please write and execute your code under the question:\n\n# 2. Please create a new dataset, \"test2\" from \"df\" where you pipe these steps together:\n# filter for TX_NEW\n# select OperatingUnit, PSNU, FY2018Q2\n# arrange PSNU\n# then View it\n\n\n\n#----------------------------------------------------------------------\n# ---- (3) Summarizing Data  ----- \n#----------------------------------------------------------------------\n\n# now that we know about piping.....\n# most of our work involves trying to aggregate or roll things up, similar to pivot tables\n# let's try to look at our SNU1 level of TX_NEW results from FY2017\n# We can use the summarise commands to aggregate our data\n\ndf %>% \n  summarise(FY2017APR = sum(FY2017APR, na.rm = TRUE ))\n# this give us a single line for the whole country and all indicators; let's filter\ndf %>% \n  filter(indicator == \"TX_NEW\", standardizedDisaggregate == \"Total Numerator\") %>% \n  summarise(FY2017APR = sum(FY2017APR, na.rm = TRUE ))\n# that's better but we want to look at the APR results across SNUs, so we need to use a group_by command \n# (which should follow by ungroup so we don't perform any other calculations across this group)\ndf %>% \n  filter(indicator == \"TX_NEW\", standardizedDisaggregate == \"Total Numerator\") %>% \n  group_by(OperatingUnit, SNU1) %>% \n  summarise(FY2017APR = sum(FY2017APR, na.rm = TRUE )) %>% \n  ungroup()  # it is important to ungroup after using group_by as R data objects retain the grouping internally\n             # this will lead to errors if later you try to create a new variable\n\n\n\n\n# ------- Exercise Question(s) -------------\n# Please write and execute your code under the question:\n\n# 3. create a new dataset, called test3 from df where you:\n# filter for TX_CURR and Total Numerator \n# summarise FY2017APR \n# and group_by PSNU\n# then View it\n\n\n\n\n#--------------------------------------------------------------\n# ---- (4) Renaming Variables (Rename) ----- \n#--------------------------------------------------------------\n\nView (slice(df, 1:20)) #seeing what is there currently\n\n# like all R assignments, the new variable is on the left side of argument\ndf7 <- rename(df, Partner = PrimePartner, Agency = FundingAgency)\n\nView(df7) # you will see new names in column headers\n\n# ------- Exercise Question(s) -------------\n# Please write and execute your code under the question:\n\n# 4. Please create a new dataset called test4 from df and rename SNU1 to EssEnYouOne\n# then view it \n\n\n\n\n\n#--------------------------------------------------------------\n# ---- (5) Deleting Variables ----- \n#--------------------------------------------------------------\n\nView (slice(df6, 1:20))\n\n# Let's remove UIDs\ndf8 <- select(df7 ,-RegionUID, -OperatingUnitUID, -SNU1UID, -PSNUuid, -MechanismUID)\n\nView (slice(df7, 1:20))\n\n\n# ------- Exercise Question(s) -------------\n# Please write and execute your code under the question:\n\n\n# 5. Please create a new dataset, called test5 from df and delete RegionUID & OperatingUnitUID\n# then view it\n\n\n\n\n#----------------------------------------------------------------------\n# ---- (6) Stacking Datasets  ----- \n#----------------------------------------------------------------------\n\n\n         \n# Use rbind function to stack or merge datasets by rows \n\ndf_double <- bind_rows(df, na_df)\n\n\n# If one dataset has variables that the other dataset does not, then bind_rows will\n# Assigns \"NA\" to those rows of columns missing in one of the data frames \n\ndf_double2 <- bind_rows(df5, na_df)\nView(arrange(df_double2, desc(FY18CUM)))\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1534995080575.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2670017956",
    "id" : "B7AE0A80",
    "lastKnownWriteTime" : 1534995907,
    "last_content_update" : 1534995907996,
    "path" : "C:/Users/lqa9/Desktop/R/ICPI R training/Reboot/R_Training_0823/20180823 R Training Session 2 Script.R",
    "project_path" : "20180823 R Training Session 2 Script.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}