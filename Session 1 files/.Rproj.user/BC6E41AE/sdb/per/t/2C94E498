{
    "collab_server" : "",
    "contents" : "\n#___________________________________________________________________________\n#~~~~~~~~~~~      _____   _             _       _                ~~~~~~~~~~~~~~~\n#~~~~~~~~~~~     |  __ \\ | |           (_)     (_)               ~~~~~~~~~~~~~~~ \n#~~~~~~~~~~~     | |__) || |_ _ __ __ _ _ _ __  _ _ __   __ _    ~~~~~~~~~~~~~~~\n#~~~~~~~~~~~     |  _  / | __| '__/ _` | | '_ \\| | '_ \\ / _` |   ~~~~~~~~~~~~~~~\n#~~~~~~~~~~~     | | \\ \\ | |_| | | (_| | | | | | | | | | (_| |   ~~~~~~~~~~~~~~~\n#~~~~~~~~~~~     |_|  \\_\\ \\__|_|  \\__,_|_|_| |_|_|_| |_|\\__, |   ~~~~~~~~~~~~~~~\n#~~~~~~~~~~~           ______                            __/ |   ~~~~~~~~~~~~~~~\n#~~~~~~~~~~~          |______|                           \\___/   ~~~~~~~~~~~~~~~\n#___________________________________________________________________________\n\n\n#-------------------------------------------------------\n# ---- (0) Loading Tidyverse Package (Slide )----- \n#--------------------------------------------------------\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n#---------------------------------------------------------\n\n\n\n\n\n#-------------------------------------------------------\n# ---- (1) Importing TXT datafile using readr(Slide )----- \n#--------------------------------------------------------\n# function used is 'read_tsv' & its arguments (file path and/or name), \n# reads in txt file named \"ex1_data.txt\", and stores dataset as an object named 'txt' \n# object <- function(relative file path/filename.txt)\n\n\n# Importing .txt file using 'readr' package\n# install.packages(\"readr\")\n# library(readr)\n\n# Full path to data file\ntxt <- read_tsv(\"C:/Users/lqa9/Desktop/R/ICPI R training/Reboot/R_training_reduxV2/RawData/ex1_data.txt\", col_names = TRUE)\n\n\n# Relative folder paths\n# Subfolder in project - dependent on setting the working directory properly  \ntxt <- read_tsv(\"./RawData/ex1_data.txt\", col_names = TRUE)\n\n# To see the types of the variables in the dataset, use spec()\nspec(txt)\n\n\n# Specifying the type of each variable being pulled in\n#             \"c\" = character \n#             \"i\" = integer \n#             \"n\" = number \n#             \"d\" = double (includes decimals)\n#             \"l\" = logical \n#             \"D\" = date \n#             \"T\" = date time \n#             \"t\" = time \n#             \"?\" = guess\n\n\n# Add customized variable types for accuracy\ntxt2 <- read_tsv(file = \"./RawData/ex1_data.txt\", \n                    col_types = cols(MechanismID        = \"c\",\n                                     AgeAsEntered       = \"c\",            \n                                     AgeFine            = \"c\",     \n                                     AgeSemiFine        = \"c\",    \n                                     AgeCoarse          = \"c\",      \n                                     Sex                = \"c\",     \n                                     resultStatus       = \"c\",     \n                                     otherDisaggregate  = \"c\",     \n                                     coarseDisaggregate = \"c\",     \n                                     FY2017_TARGETS     = \"d\",\n                                     FY2017Q1           = \"d\",      \n                                     FY2017Q2           = \"d\",      \n                                     FY2017Q3           = \"d\",      \n                                     FY2017Q4           = \"d\",      \n                                     FY2017APR          = \"d\",\n                                     FY2018Q1           = \"d\",\n                                     FY2018Q2           = \"d\",\n                                     FY2018_TARGETS     = \"d\",\n                                     FY2019_TARGETS     = \"d\"))\n\n\n# Check your data classes for all variables\nspec(txt2)\n\n# checking a single variable class\nclass(txt2$indicator)\n\n\n#---------------------------------------------------------\n\n\n\n#-------------------------------------------------------\n# ---- (2) Importing CSV datafile using readr(Slide )----- \n#--------------------------------------------------------\n# function used is 'read_csv' & its arguments (file path and/or name), \n# reads in csv file named \"ex1_data.csv\", and stores dataset as an object named 'csv_df' \n# object <- function(relative file path/filename.csv)\n\n\n# Importing .txt file using 'readr' package\n# install.packages(\"readr\")\n# library(readr)\n\n# Full path to data file\ncsv <- read_csv(\"C:/Users/lqa9/Desktop/R/ICPI R training/Reboot/R_training_reduxV2/RawData/ex1_data.csv\")\n\n\n# Relative folder paths\ncsv <- read_csv (\"./RawData/ex1_data.csv\")\n# To see the character types of the variables in the dataset, use spec()\nspec(csv)\n\n# Specifying the type of each variable being pulled in\n#             \"c\" = character \n#             \"i\" = integer \n#             \"n\" = number \n#             \"d\" = double (includes decimals)\n#             \"l\" = logical \n#             \"D\" = date \n#             \"T\" = date time \n#             \"t\" = time \n#             \"?\" = guess\n\n\n# Add customized variable types for accuracy\ncsv2 <- read_csv (file = \"./RawData/ex1_data.csv\", \n                    col_types = cols(MechanismID        = \"c\",\n                                     AgeAsEntered       = \"c\",            \n                                     AgeFine            = \"c\",     \n                                     AgeSemiFine        = \"c\",    \n                                     AgeCoarse          = \"c\",      \n                                     Sex                = \"c\",     \n                                     resultStatus       = \"c\",     \n                                     otherDisaggregate  = \"c\",     \n                                     coarseDisaggregate = \"c\",     \n                                     FY2017_TARGETS     = \"d\",\n                                     FY2017Q1           = \"d\",      \n                                     FY2017Q2           = \"d\",      \n                                     FY2017Q3           = \"d\",      \n                                     FY2017Q4           = \"d\",      \n                                     FY2017APR          = \"d\",\n                                     FY2018Q1           = \"d\",\n                                     FY2018Q2           = \"d\",\n                                     FY2018_TARGETS     = \"d\",\n                                     FY2019_TARGETS     = \"d\"))\nspec(csv2)\n\n\n\n\n# # Pulling dataset from GitHub\nMSD <- read_tsv(\"https://raw.githubusercontent.com/ICPI/TrainingDataset/master/Output/ICPI_MER_Structured_TRAINING_Dataset_PSNU_IM_FY17-18_20180515_v1_1.txt\")\n\n\n# Getting HELP  \n?read_csv\nhelp(\"read_csv\")\n\n#---------------------------------------------------------\n\n\n\n#-------------------------------------------------------\n# ---- (3) Ways to View your dataset(s) (Slide )----- \n#--------------------------------------------------------\nView(txt2)  # to see entire dataset\nnames(txt2) # to see variable names\nspec(txt2) \n\n  # [ ] lets you index your data frame.\n  # The first element is for rows and second for columns\n  # leaving any element blank selects all (rows or columns) \nView(txt2[1:20, ]) # selects rows 1 to 20 and all columns\nView(txt2[1:20, 1:3]) # selects rows 1 to 20 and columns 1 to 3\n\n\n\n# The dplyr function, 'select' allows for specifiying any number of variables to retain and view.\nselect(txt2, OperatingUnit, PSNU, Region)\nView (select(txt2, OperatingUnit, PSNU, Region))\n\n# To retain variables that start with or end with a certain string pattern. \nselect(txt2, ends_with(\"Q2\"))\nselect(txt2, starts_with(\"FY2017\"))\n\n# The Dplyr function, 'count' shows a breakdown of a column's unique values. \ncount(txt2, OperatingUnit)\ncount(txt2, Region, OperatingUnit, PSNU, SNU1)\nView (count(txt2, Region, OperatingUnit, PSNU, SNU1))\n\ncount(txt2, OperatingUnit, SNU1)\n\n# Use group_by with summarise to simulate a pivot table (NEEDS REVIEW)\nView (group_by(txt2, OperatingUnit, SNU1) %>%\n    summarise(sum(FY2017APR, na.rm = TRUE ))) %>%\n    ungroup\n  \n\n\n#-------------------------------------------------------\n\n\n\n\n\n\n#-------------------------------------------------------\n# ---- (4) Sorting your dataset (Slide )----- \n#--------------------------------------------------------\n\n# Sort variables using 'arrange' function from dplyr\n\n# Sorting in ascending order (default) \nsorted <- arrange (txt2, PSNU)\nselect(sorted, PSNU)   # Doesn't display all rows\nView(select(sorted, PSNU))   # Using 'View\" shows all rows\nView(count(sorted, PSNU))\n\n# Sorting in descending order\nsorted2 <- arrange(txt2, desc(PSNU))\nView(select(sorted2, PSNU))\nView(count(sorted2, PSNU)) # doesn't obey the sort\n\n\n# Sorting multiple variables\nsorted3 <- arrange(txt2, PSNU, indicator)\nView(select(sorted3, PSNU, indicator))\nView(count(sorted3, PSNU, indicator))\n\n#-------------------------------------------------------\n\n\n\n\n\n#-------------------------------------------------------\n# ---- (5) Subsetting your data (Slide )----- \n# Ref: https://www.statmethods.net/management/subset.html\n#--------------------------------------------------------\n\n\n#---- Subsetting for Columns (select) -----#\n\n# Use dplyr 'Select' function to subset by variable(s)\ngeo_df <- select(txt_df, OperatingUnit, SNU1, PSNU, FY2017APR)\nnames(geo_df)\nView(geo_df)\n\n# Alternatively, to delete variables:\ngeo_df2 <- select(txt_df, -starts_with(\"FY2017\"))\nnames(geo_df2)\nView(geo_df2)\n\ngeo_df3 <- select(txt_df, -Region, -CountryName)\nnames(geo_df3)\nView(geo_df3)\n\n\n\n#---- Subsetting for Rows (filter) -----#\n\n# filtering for one Indicator\nhts <- filter(txt_df, indicator ==\"HTS_TST\")\n# Ways to see if this worked\nselect(hts, indicator)\nView (select(hts, indicator))\nView (count(hts, indicator))  \n\n# filter for one indicator, (uses logical operator Not Equal) \nhts2 <- filter(txt_df, indicator != \"HTS_TST\")\nView (select (hts2, indicator))\nView (count(hts2, indicator)) \n\n\n# filter for multiple indicators, (uses logical operator OR) \nhts3 <- filter(txt_df, indicator == \"HTS_TST\" | indicator == \"TX_NEW\")\nView (select (hts3, indicator))\nView (count(hts3, indicator)) \n\n\n# filter for multiple conditions, (uses logical operator AND) \nhts4 <- filter(txt2, indicator == \"HTS_TST\", FY2017APR > 100)\nView (select (hts4, indicator, FY2017APR))\nView (count(hts4, indicator, FY2017APR)) \n\n\n# filter for multiple conditions, (uses multiple operators and multiple conditions) \n# Filtering for HTS_TST and TX_NEW total numerator values and its PSNUs\nhts5 <- filter(txt2, indicator == \"HTS_TST\" | indicator == \"TX_NEW\", standardizedDisaggregate == \"Total Numerator\", FY2017APR > 100)\nView (select (hts5, PSNU, indicator, standardizedDisaggregate, FY2017APR))\nView (count(hts5, PSNU, indicator, standardizedDisaggregate, FY2017APR)) \n\n\n#-------------------------------------------------------\n\n\n\n\n\n#-------------------------------------------------------\n# ---- (6) Cleaning your data (Slide )----- \n#--------------------------------------------------------\n  # Removing values with 'NA' \n    # reading in the dataset with NA values in Sex\nna_df <- read_tsv(file=\"./RawData/na_data.txt\", \n                  col_types = cols(MechanismID        = \"c\",\n                                     AgeAsEntered       = \"c\",            \n                                     AgeFine            = \"c\",     \n                                     AgeSemiFine        = \"c\",    \n                                     AgeCoarse          = \"c\",      \n                                     Sex                = \"c\",     \n                                     resultStatus       = \"c\",     \n                                     otherDisaggregate  = \"c\",     \n                                     coarseDisaggregate = \"c\",     \n                                     FY2017_TARGETS     = \"d\",\n                                     FY2017Q1           = \"d\",      \n                                     FY2017Q2           = \"d\",      \n                                     FY2017Q3           = \"d\",      \n                                     FY2017Q4           = \"d\",      \n                                     FY2017APR          = \"d\",\n                                     FY2018Q1           = \"d\",\n                                     FY2018Q2           = \"d\",\n                                     FY2018_TARGETS     = \"d\"))\n\n\n# Checking the data \ncount(na_df, Sex)\n\n\n# Removing N/A or other undesireable values and convert to \n  # True missing, or blank \"\"\n \nna_df1 <- mutate(na_df, Sex = if_else(Sex == \"N/A\", \"\", Sex))  #converts to blanks\ncount(na_df1, Sex)\n\n# when running models, true <NA> is treated as \"missing\"\n# while blank \"\" is treated as another category for the variable\n# Numeric variables will not accept \"\", but will have true <NA> only\n#-------------------------------------------------------\n\n\n\n\n#-------------------------------------------------------\n# ---- (7) Exporting your data (Slide )----- \n# ref: https://www.statmethods.net/input/exportingdata.html\n#--------------------------------------------------------\n\n\nwrite_tsv(hts4, path = \"./Output/exported_data.txt\")\n\nwrite_csv(hts4, path = \"./Output/exported_data.csv\")\n\n\n# # exporting to Excel\nlibrary(xlsx)\nwrite.xlsx(mcad_df, \"./RawData/exp_Excel_data.xlsx\")\n#-------------------------------------------------------\n\n\n\n\n\n\n\n\n\n",
    "created" : 1534889303402.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "442313997",
    "id" : "2C94E498",
    "lastKnownWriteTime" : 1534889062,
    "last_content_update" : 1534889062,
    "path" : "C:/Users/lqa9/Desktop/R/ICPI R training/Reboot/Session 1 files/Rcode/2018_08_13_R_training_session1.R",
    "project_path" : "Rcode/2018_08_13_R_training_session1.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}