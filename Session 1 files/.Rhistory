install(c("fs", "devtools"))
install.packages(c("fs", "devtools"))
df <- read.csv("./RawData/ex1_data.csv")
df <- read.csv("./RawData/ex1_data.csv")
library(tidyverse)
# Pulling in training data from GitHub
df <- read_tsv("https://raw.githubusercontent.com/ICPI/TrainingDataset/master/Output/ICPI_MER_Structured_TRAINING_Dataset_PSNU_IM_FY17-18_20180515_v1_1.txt",
col_types = cols(MechanismID      = "c",
AgeAsEntered       = "c",
AgeFine            = "c",
AgeSemiFine        = "c",
AgeCoarse          = "c",
Sex                = "c",
resultStatus       = "c",
otherDisaggregate  = "c",
coarseDisaggregate = "c",
FY2017_TARGETS     = "d",
FY2017Q1           = "d",
FY2017Q2           = "d",
FY2017Q3           = "d",
FY2017Q4           = "d",
FY2017APR          = "d",
FY2018Q1           = "d",
FY2018Q2           = "d",
FY2018_TARGETS     = "d"))
View(df)
write_tsv(df, path = "./Output/ex2_data.txt")
write_tsv(df, path = "./Output/ex2_data.txt")
setwd("C:/Users/lqa9/Desktop/R/ICPI R training/Reboot/Session 1 files")
write_tsv(df, path = "./Output/ex2_data.txt")
df <- read_tsv("./RawData/ex2_data.txt",
col_types = cols(MechanismID      = "c",
AgeAsEntered       = "c",
AgeFine            = "c",
AgeSemiFine        = "c",
AgeCoarse          = "c",
Sex                = "c",
resultStatus       = "c",
otherDisaggregate  = "c",
coarseDisaggregate = "c",
FY2017_TARGETS     = "d",
FY2017Q1           = "d",
FY2017Q2           = "d",
FY2017Q3           = "d",
FY2017Q4           = "d",
FY2017APR          = "d",
FY2018Q1           = "d",
FY2018Q2           = "d",
FY2018_TARGETS     = "d"))
df <- read_tsv("./RawData/ex2_data.txt",
col_types = cols(MechanismID      = "c",
AgeAsEntered       = "c",
AgeFine            = "c",
AgeSemiFine        = "c",
AgeCoarse          = "c",
Sex                = "c",
resultStatus       = "c",
otherDisaggregate  = "c",
coarseDisaggregate = "c",
FY2017_TARGETS     = "d",
FY2017Q1           = "d",
FY2017Q2           = "d",
FY2017Q3           = "d",
FY2017Q4           = "d",
FY2017APR          = "d",
FY2018Q1           = "d",
FY2018Q2           = "d",
FY2018_TARGETS     = "d"))
df5 <- rowwise (mutate(df, FY18CUM = sum(FY2018Q1, FY2018Q2, na.rm=T)))
View(count(df5,Fy18CUM))
View(count(df5,FY18CUM))
View(df5[1:50,])
df5 <- rowwise (mutate(df, FY18CUM = sum(FY2018Q1, FY2018Q2, na.rm=T)), ungroup ())
df5 <- mutate(df, FY18CUM = sum(FY2018Q1 + FY2018Q2, na.rm=T))
#Undo the rowwise virtual grouping
View(df5[1:50,])
df5 <- mutate(df, FY18CUM = FY2018Q1 + FY2018Q2, na.rm=T)
#Undo the rowwise virtual grouping
View(df5[1:50,])
df5 <- mutate(df, FY18CUM = FY2018Q1 + FY2018Q2)
#Undo the rowwise virtual grouping
View(df5[1:50,])
df5 <- mutate(df, FY18CUM = FY2018Q1 + FY2018Q2)
View(df5[1:50,])
View(df5)
View(arrange (df5, desc(FY18CUM)))
df5 <- mutate(df, FY18CUM = FY2018Q1 + FY2018Q2, na.rm =T)
View (arrange(df5, desc(FY18CUM)))
df5 <- mutate(df, FY18CUM = FY2018Q1 + FY2018Q2, na.rm =F)
View (arrange(df5, desc(FY18CUM)))
df5 <- mutate(df, FY18CUM = sum(FY2018Q1 + FY2018Q2, na.rm =T))
View (arrange(df5, desc(FY18CUM)))
tx2 <- df %>%
filter(indicator == "TX_NEW" & FY2017APR >0 ) %>%
rename (disagg_type = standardizedDisaggregate ) %>%
select (OperatingUnit, indicator, PSNU, disagg_type, FY2017APR)
View(count(tx2, disagg_type, FY2017APR))
tx3 <- df %>%
filter((indicator == "TX_CURR" | indicator == "TX_NEW") & standardizedDisaggregate == "Total Numerator") %>%
mutate (newpartnername = if_else(PrimePartner == "Stark", "Ned's Family", PrimePartner)) %>%
select (OperatingUnit, SNU1, SNUPrioritization, PSNU, newpartnername, indicator, standardizedDisaggregate, FY2017APR) %>%
arrange (newpartnername) %>%
rename (disagg_type = standardizedDisaggregate)
View(tx3)
View(count(tx3, indicator, disagg_type))
df_double <- rbind(df, df5)
# reading in the dataset with NA values in Sex
na_df <- read_tsv(file="./RawData/na_data.txt",
col_types = cols(MechanismID        = "c",
AgeAsEntered       = "c",
AgeFine            = "c",
AgeSemiFine        = "c",
AgeCoarse          = "c",
Sex                = "c",
resultStatus       = "c",
otherDisaggregate  = "c",
coarseDisaggregate = "c",
FY2017_TARGETS     = "d",
FY2017Q1           = "d",
FY2017Q2           = "d",
FY2017Q3           = "d",
FY2017Q4           = "d",
FY2017APR          = "d",
FY2018Q1           = "d",
FY2018Q2           = "d",
FY2018_TARGETS     = "d"))
df_double <- rbind(df, na_df)
spec(df5)
names(df5)
View(df10)
df10 <-  mutate(df5, FY18CUM = "" )
View(select(df10, FY18CUM))
df_double2 <- rbind(df5, df10)
View(select(df_double2,FY18CUM))
df5 <- mutate(df, FY2018Q1 =
if_else (FY2018Q1 == "N/A", "", FY2018Q1))
df5 <- mutate(df5, FY2018Q2 =
if_else (FY2018Q2 == "N/A", "", FY2018Q2))
df5 <- mutate(df, FY18CUM = FY2018Q1 + FY2018Q2)
View (arrange(df5, desc(FY18CUM)))
df5 <- mutate(df, FY2018Q1 =
if_else (FY2018Q1 == "N/A", "", FY2018Q1))
df5 <- mutate(df, FY2018Q1 = if_else (FY2018Q1 == "N/A", '', FY2018Q1))
df5 <- mutate(df, FY2018Q1 = if_else (FY2018Q1 == N/A, "", FY2018Q1))
# Dividing FY2017APR values by 10
df2 <- mutate(df, FY2017APR_true = FY2017APR/10)
# Above step AND doubling the FY18 Q2 values
df2 <- mutate(df, FY2017APR_true = FY2017APR/10, FY2018Q2_true = FY2018Q2 *2)
df3 <- mutate(df,
newpartnername = if_else(
PrimePartner == "Stark", "SansaStark", PrimePartner))
# New Partner Names, multiple changes.
df4 <- mutate(df, newpartnername =
if_else(PrimePartner == "Stark", "Ned's Family",
if_else(PrimePartner == "First Men", "First Men & Women",
if_else(PrimePartner == "Ice" , "Ice & Fire", PrimePartner))))
df7 <- rename(df, Partner = PrimePartner, Agency = FundingAgency)
View(df7)
